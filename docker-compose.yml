networks:
  scoobydoo:
    name: scoobydoo
    enable_ipv6: true
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "true"

services:
  db:
    image: postgres:latest
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./Postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    expose:
      - "5432"
    ports:
      - '5432:5432'  # Uncomment if you want to access the database
    networks:
      - scoobydoo

  python:
    image: python:3.13.1
    container_name: python-dev
    restart: unless-stopped
    volumes:
      - ./Python:/app
      - python_venv:/app/venv
    env_file:
      - .env
    working_dir: /app
    stdin_open: true
    tty: true
    expose:
      - "8000"  # Expose port 8000 for Flask
    environment:
      FLASK_APP: ${FLASK_APP}
      FLASK_ENV: ${FLASK_ENV}
      FLASK_DEBUG: ${FLASK_DEBUG}
      PYTHONPATH: /app
    depends_on:
      - db
    command: >
      /bin/sh -c "
      cd /app &&
      python -m venv venv &&
      . venv/bin/activate &&
      pip install --upgrade pip &&
      pip install -r requirements.txt &&
      flask run --host 0.0.0.0 --port 8000"
    networks:
      - scoobydoo

  proxy:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    container_name: nginx-proxy-manager
    ports:
      - '443:443' # Public HTTPS Port
#      - '81:81' # Admin Web Port. Uncomment if you want to access the admin panel
    environment:
      DB_POSTGRES_HOST: 'db'
      DB_POSTGRES_PORT: '5432'
      DB_POSTGRES_USER: ${POSTGRES_USER}
      DB_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DB_POSTGRES_DB: ${POSTGRES_DB}
      INITIAL_ADMIN_EMAIL: ${INITIAL_ADMIN_EMAIL}
      INITIAL_ADMIN_PASSWORD: ${INITIAL_ADMIN_PASSWORD}
      VIRTUAL_HOST: ${VIRTUAL_HOST}    
    networks:
      - scoobydoo
    volumes:
      - proxy-data:/data
      - proxy-letsencrypt:/etc/letsencrypt
    depends_on:
      - db
  
  duckdns:
    image: linuxserver/duckdns
    container_name: duckdns
    restart: always
    environment:
      - SUBDOMAINS= ${DUCKDNS_SUBDOMAIN}
      - TOKEN= ${DUCKDNS_TOKEN}
      - LOG_FILE=true  # Enable logging
    volumes:
      - duckdns-logs:/config/logs  # Mount logs directory
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - scoobydoo

volumes:
  postgres-data:
  proxy-data:
  proxy-letsencrypt:
  duckdns-logs:
  python_venv:
